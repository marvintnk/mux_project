<script>
    import { swapBoxService } from "$lib/api/swapbox.service.js";
    import { goto } from '$app/navigation';
    
    let loggingIn = $state(false);
    let registerButtonUnlocked = $state(false);
    let invalidEmail = $state(false);
    let invalidPassword = $state(false);
    let loginError = $state('');

    const check = () => {
        const email = document.getElementById("email").value;
        const password = document.getElementById("pw").value;

        if(!validateEmail(email)) {
            invalidEmail = true;
            document.getElementById("iemail").innerHTML = email.length > 0 ? "Bitte geben Sie eine valide E-Mail an." : "";
        } else {
            if(!email.endsWith("@th-brandenburg.de")) {
                invalidEmail = true;
                document.getElementById("iemail").innerHTML = "Wir erlauben lediglich E-Mail Adressen von der Technischen Hochschule Brandenburg.";
            } else {
                invalidEmail = false;
                document.getElementById("iemail").innerHTML = "";
            }
        }

        // Check password length
        if(password.length > 0 && password.length < 6) {
            invalidPassword = true;
            document.getElementById("ipass").innerHTML = "Passwort muss mindestens 6 Zeichen lang sein.";
        } else {
            invalidPassword = false;
            document.getElementById("ipass").innerHTML = "";
        }

        registerButtonUnlocked = !invalidEmail && !invalidPassword && email.length > 0 && password.length > 0;
    }

    const handleLogin = async () => {
        loggingIn = true;
        loginError = '';
        
        try {
            const email = document.getElementById("email").value;
            const password = document.getElementById("pw").value;

            // Get user data from your users table
            const userData = await swapBoxService.getUserByEmail(email);
            
            if (!userData) {
                throw new Error('Benutzer nicht gefunden.');
            }

            // Verify password
            const isPasswordValid = await verifyPassword(password, userData.password_hash);
            
            if (!isPasswordValid) {
                throw new Error('Ungültiges Passwort.');
            }

            // Check if user is verified
            if (!userData.verified) {
                throw new Error('Bitte bestätigen Sie zuerst Ihre E-Mail-Adresse.');
            }

            // Store user session/data
            localStorage.setItem('user', JSON.stringify(userData));
            localStorage.setItem('isLoggedIn', 'true');
            
            // Redirect to dashboard or home page
            goto('/');
            
        } catch (error) {
            console.error('Login error:', error);
            loginError = error.message || 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.';
        } finally {
            loggingIn = false;
        }
    }

    // Password verification function (matches the hashing used in registration)
    const verifyPassword = async (password, hashedPassword) => {
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hash = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hash));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        
        return hashHex === hashedPassword;
    }

    const validateEmail = (email) => {
        return String(email)
            .toLowerCase()
            .match(
                /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
            );
    };
</script>

<div class="flex flex-col">
    <div class="mx-auto mt-5">
        <p class="text-xl font-bold">Willkommen zurück</p>
    </div>

    <div class="m-auto mt-5">
        <fieldset class="fieldset bg-base-200 border-base-300 rounded-box w-xs border p-4">
            <legend class="fieldset-legend">Login</legend>

            {#if loginError}
                <div class="alert alert-error mb-4">
                    <span>{loginError}</span>
                </div>
            {/if}

            <label class="label">E-Mail</label>
            <input id="email" type="email" class="input" disabled="{loggingIn}" oninput={() => check()} required />
            <p id="iemail" hidden="{!invalidEmail}" class="text-error"></p>

            <label class="label">Passwort</label>
            <input id="pw" type="password" class="input" disabled="{loggingIn}" oninput={() => check()} required />
            <p id="ipass" hidden="{!invalidPassword}" class="text-error"></p>

            <a class="mt-5 text-right w-full link link-info" href="/register">Noch kein Account?</a>
            <button 
                class="btn btn-outline btn-success" 
                disabled="{!registerButtonUnlocked || loggingIn}" 
                onclick={handleLogin}
            >
                {#if loggingIn}
                    <span class="loading loading-dots loading-md"></span>
                {:else}
                    Login
                {/if}
            </button>
        </fieldset>
    </div>
</div>
